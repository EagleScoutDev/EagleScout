drop trigger if exists "validate_form_trigger" on "public"."forms";

create table "public"."pit_scout_reports" (
    "id" integer generated by default as identity not null,
    "team_id" integer not null,
    "user_id" uuid not null,
    "data" json not null,
    "created_at" timestamp with time zone not null,
    "online" boolean not null default true
);


alter table "public"."competitions" add column "pit_scout_form_id" integer;

alter table "public"."forms" add column "pit_scouting" boolean not null default false;

CREATE UNIQUE INDEX pit_scout_reports_pkey ON public.pit_scout_reports USING btree (id);

alter table "public"."pit_scout_reports" add constraint "pit_scout_reports_pkey" PRIMARY KEY using index "pit_scout_reports_pkey";

alter table "public"."competitions" add constraint "competitions_pit_scout_form_id_fkey" FOREIGN KEY (pit_scout_form_id) REFERENCES forms(id) not valid;

alter table "public"."competitions" validate constraint "competitions_pit_scout_form_id_fkey";

alter table "public"."pit_scout_reports" add constraint "pit_scout_reports_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."pit_scout_reports" validate constraint "pit_scout_reports_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_current_competition()
 RETURNS TABLE(competition_id integer, competition_name text, start_time timestamp with time zone, end_time timestamp with time zone, form_id integer, scout_assignments_enabled boolean, tba_event_id integer, organization_id integer, pit_scout_form_id integer, form_structure jsonb, pit_scout_form_structure jsonb)
 LANGUAGE plpgsql
AS $function$  
BEGIN
    RETURN QUERY
        SELECT
            c.id AS competition_id,
            c.name AS competition_name,
            c.start_time,
            c.end_time,
            c.form_id,
            c.scout_assignments_enabled,
            c.tba_event_id,
            c.organization_id,
            c.pit_scout_form_id,
            f1.form_structure AS form_structure,
            f2.form_structure AS pit_scout_form_structure
        FROM
            competitions c
        LEFT JOIN
            forms f1 ON c.form_id = f1.id
        LEFT JOIN
            forms f2 ON c.pit_scout_form_id = f2.id
        WHERE
            now() BETWEEN c.start_time AND c.end_time;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.list_all_competitions()
 RETURNS TABLE(competition_id integer, competition_name text, start_time timestamp with time zone, end_time timestamp with time zone, form_id integer, scout_assignments_enabled boolean, tba_event_id integer, organization_id integer, pit_scout_form_id integer, form_structure jsonb, pit_scout_form_structure jsonb)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
        SELECT
            c.id AS competition_id,
            c.name AS competition_name,
            c.start_time,
            c.end_time,
            c.form_id,
            c.scout_assignments_enabled,
            c.tba_event_id,
            c.organization_id,
            c.pit_scout_form_id,
            f1.form_structure AS form_structure,
            f2.form_structure AS pit_scout_form_structure
        FROM
            competitions c
        LEFT JOIN
            forms f1 ON c.form_id = f1.id
        LEFT JOIN
            forms f2 ON c.pit_scout_form_id = f2.id;
END;
$function$
;

CREATE TRIGGER pit_scout_reports_prevent_created_at_update_trigger BEFORE UPDATE ON public.pit_scout_reports FOR EACH ROW EXECUTE FUNCTION prevent_created_at_update();

CREATE TRIGGER pit_scout_reports_set_created_at BEFORE INSERT ON public.pit_scout_reports FOR EACH ROW EXECUTE FUNCTION set_created_at();

CREATE TRIGGER validate_form_trigger BEFORE INSERT ON public.forms FOR EACH ROW EXECUTE FUNCTION validate_form();
ALTER TABLE "public"."forms" DISABLE TRIGGER "validate_form_trigger";


