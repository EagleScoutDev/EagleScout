create type "public"."alliance" as enum ('red', 'blue');

create table "public"."scout_assignments" (
    "id" integer generated by default as identity not null,
    "competition_id" integer not null,
    "match_id" integer,
    "user_id" uuid
);


alter table "public"."scout_assignments" enable row level security;

create table "public"."tba_events" (
    "id" integer generated by default as identity not null,
    "event_key" text not null
);


alter table "public"."tba_events" enable row level security;

create table "public"."tba_matches" (
    "id" integer generated by default as identity not null,
    "event_id" integer not null,
    "team" integer not null,
    "match" integer not null,
    "predicted_time" timestamp with time zone,
    "alliance" alliance not null
);


alter table "public"."tba_matches" enable row level security;

alter table "public"."competitions" add column "scout_assignments_enabled" boolean not null default false;

alter table "public"."competitions" add column "tba_event" integer;

CREATE UNIQUE INDEX scout_assignments_pkey ON public.scout_assignments USING btree (id);

CREATE UNIQUE INDEX tba_events_pkey ON public.tba_events USING btree (id);

CREATE UNIQUE INDEX tba_matches_pkey ON public.tba_matches USING btree (id);

alter table "public"."scout_assignments" add constraint "scout_assignments_pkey" PRIMARY KEY using index "scout_assignments_pkey";

alter table "public"."tba_events" add constraint "tba_events_pkey" PRIMARY KEY using index "tba_events_pkey";

alter table "public"."tba_matches" add constraint "tba_matches_pkey" PRIMARY KEY using index "tba_matches_pkey";

alter table "public"."competitions" add constraint "competitions_tba_event_fkey" FOREIGN KEY (tba_event) REFERENCES tba_events(id) not valid;

alter table "public"."competitions" validate constraint "competitions_tba_event_fkey";

alter table "public"."scout_assignments" add constraint "scout_assignments_competition_id_fkey" FOREIGN KEY (competition_id) REFERENCES competitions(id) ON DELETE CASCADE not valid;

alter table "public"."scout_assignments" validate constraint "scout_assignments_competition_id_fkey";

alter table "public"."scout_assignments" add constraint "scout_assignments_match_id_fkey" FOREIGN KEY (match_id) REFERENCES tba_matches(id) not valid;

alter table "public"."scout_assignments" validate constraint "scout_assignments_match_id_fkey";

alter table "public"."scout_assignments" add constraint "scout_assignments_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."scout_assignments" validate constraint "scout_assignments_user_id_fkey";

alter table "public"."tba_matches" add constraint "tba_matches_event_id_fkey" FOREIGN KEY (event_id) REFERENCES tba_events(id) not valid;

alter table "public"."tba_matches" validate constraint "tba_matches_event_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.add_tba_event(event_key_arg text, matches jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$DECLARE
  event_id integer;
  match_elem jsonb;
BEGIN
IF NOT EXISTS (SELECT 1 FROM tba_events WHERE event_key = event_key_arg) THEN

  INSERT INTO tba_events (event_key) VALUES (event_key_arg) returning id into event_id;

  FOR match_elem IN SELECT * FROM jsonb_array_elements(matches)
  LOOP
    INSERT INTO tba_matches(event_id, team, match, predicted_time, alliance) VALUES (event_id, CAST(match_elem->>'team_red_1' AS integer), CAST(match_elem->>'match_number' AS integer), CAST(match_elem->>'predicted_time' AS timestamp with time zone), 'red');
    INSERT INTO tba_matches(event_id, team, match, predicted_time, alliance) VALUES (event_id, CAST(match_elem->>'team_red_2' AS integer), CAST(match_elem->>'match_number' AS integer), CAST(match_elem->>'predicted_time' AS timestamp with time zone), 'red');
    INSERT INTO tba_matches(event_id, team, match, predicted_time, alliance) VALUES (event_id, CAST(match_elem->>'team_red_3' AS integer), CAST(match_elem->>'match_number' AS integer), CAST(match_elem->>'predicted_time' AS timestamp with time zone), 'red');
    INSERT INTO tba_matches(event_id, team, match, predicted_time, alliance) VALUES (event_id, CAST(match_elem->>'team_blue_1' AS integer), CAST(match_elem->>'match_number' AS integer), CAST(match_elem->>'predicted_time' AS timestamp with time zone), 'blue');
    INSERT INTO tba_matches(event_id, team, match, predicted_time, alliance) VALUES (event_id, CAST(match_elem->>'team_blue_2' AS integer), CAST(match_elem->>'match_number' AS integer), CAST(match_elem->>'predicted_time' AS timestamp with time zone), 'blue');
    INSERT INTO tba_matches(event_id, team, match, predicted_time, alliance) VALUES (event_id, CAST(match_elem->>'team_blue_3' AS integer), CAST(match_elem->>'match_number' AS integer), CAST(match_elem->>'predicted_time' AS timestamp with time zone), 'blue');

  END LOOP;

END IF;

END;$function$
;


