create table "public"."match_bets_results" (
    "id" bigint generated by default as identity not null,
    "match_id" integer not null,
    "result" text not null
);


alter table "public"."match_bets_results" enable row level security;

create table "public"."scoutcoin_ledger" (
    "id" bigint generated by default as identity not null,
    "description" text not null,
    "src_user" uuid,
    "dest_user" uuid,
    "amount_change" integer not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."scoutcoin_ledger" enable row level security;

CREATE UNIQUE INDEX match_bets_results_pkey ON public.match_bets_results USING btree (id);

CREATE UNIQUE INDEX scoutcoin_ledger_pkey ON public.scoutcoin_ledger USING btree (id);

alter table "public"."match_bets_results" add constraint "match_bets_results_pkey" PRIMARY KEY using index "match_bets_results_pkey";

alter table "public"."scoutcoin_ledger" add constraint "scoutcoin_ledger_pkey" PRIMARY KEY using index "scoutcoin_ledger_pkey";

alter table "public"."match_bets_results" add constraint "match_bets_results_match_id_fkey" FOREIGN KEY (match_id) REFERENCES matches(id) not valid;

alter table "public"."match_bets_results" validate constraint "match_bets_results_match_id_fkey";

alter table "public"."scoutcoin_ledger" add constraint "scoutcoin_ledger_dest_user_fkey" FOREIGN KEY (dest_user) REFERENCES auth.users(id) not valid;

alter table "public"."scoutcoin_ledger" validate constraint "scoutcoin_ledger_dest_user_fkey";

alter table "public"."scoutcoin_ledger" add constraint "scoutcoin_ledger_src_user_fkey" FOREIGN KEY (src_user) REFERENCES auth.users(id) not valid;

alter table "public"."scoutcoin_ledger" validate constraint "scoutcoin_ledger_src_user_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.match_tie(match_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
  bet_record record;
  match_number text;
  comp_name text;
BEGIN
  IF auth.role() <> 'service_role' THEN
    RAISE EXCEPTION 'Unauthorized access';
  END IF;
  INSERT INTO match_bets_results (match_id, result) VALUES (match_id, 'tie');
  FOR bet_record IN SELECT * FROM match_bets WHERE match_id = match_id LOOP
    IF match_number IS NULL THEN
      SELECT number INTO match_number FROM matches WHERE id = match_id;
    END IF;
    IF comp_name IS NULL THEN
      SELECT name INTO comp_name FROM competitions WHERE id = (SELECT competition_id FROM matches WHERE id = match_id);
    END IF;
    UPDATE profiles SET scoutcoins = scoutcoins + bet_record.amount WHERE id = bet_record.user_id;
    INSERT INTO scoutcoin_ledger (src_user, dest_user, amount_change, description) VALUES (NULL, bet_record.user_id, bet_record.amount, 'Bet Match ' || match_number || ' Tied (' || comp_name || ')');
  END LOOP;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.match_winner(match_id bigint, winner text, change_amounts jsonb[])
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
  match_number text;
  competition_name text;
  change_amount jsonb;
begin
  IF auth.role() <> 'service_role' THEN
    RAISE EXCEPTION 'Unauthorized access';
  END IF;
  INSERT INTO match_bets_results (match_id, result) VALUES (match_id, winner);
  foreach change_amount in array change_amounts loop
    if match_number is NULL then
      select number into match_number from matches where id = match_id;
      select name into competition_name from competitions where id = (select competition_id from matches where id = match_id);
    end if;
    update profiles set scoutcoin = scoutcoin + change_amount->>'amount' where id = (change_amount->>'id')::bigint;
    INSERT INTO scoutcoin_ledger (src_user, dest_user, amount_change, description) VALUES (NULL, bet_record.user_id, bet_record.amount, 'Bet Match ' || match_number || ' ' ||
    CASE WHEN change_amount->>'amount'::int < 0 THEN 'Lost' ELSE 'Won' END || ' (' || competition_name || ')');
  end loop;
end;
$function$
;
