create type "public"."scout_assignments_config" as enum ('disabled', 'position_based', 'team_based');

create type "public"."scout_assignments_robot_position" as enum ('rf', 'rm', 'rc', 'bf', 'bm', 'bc');

drop policy "Everyone in a team can view scout assignments" on "public"."scout_assignments";

drop policy "Only admins in a team can create scout assignments" on "public"."scout_assignments";

drop policy "Only admins in a team can delete scout assignments" on "public"."scout_assignments";

drop policy "Only admins in a team can update scout assignments" on "public"."scout_assignments";

alter table "public"."scout_assignments" drop constraint "scout_assignments_competition_id_fkey";

alter table "public"."scout_assignments" drop constraint "scout_assignments_competition_id_match_id_unique";

alter table "public"."scout_assignments" drop constraint "scout_assignments_match_id_fkey";

alter table "public"."scout_assignments" drop constraint "scout_assignments_user_id_fkey";

alter table "public"."scout_assignments" drop constraint "scout_assignments_pkey";

drop index if exists "public"."scout_assignments_competition_id_match_id_unique";

drop index if exists "public"."scout_assignments_pkey";

drop table "public"."scout_assignments";

create table "public"."scout_assignments_position_based" (
    "id" integer generated by default as identity not null,
    "competition_id" integer not null,
    "user_id" uuid not null,
    "match_number" integer not null,
    "robot_position" scout_assignments_robot_position not null
);


alter table "public"."scout_assignments_position_based" enable row level security;

create table "public"."scout_assignments_team_based" (
    "id" integer generated by default as identity not null,
    "competition_id" integer not null,
    "match_id" integer not null,
    "user_id" uuid not null
);


alter table "public"."scout_assignments_team_based" enable row level security;

alter table "public"."competitions" drop column "scout_assignments_enabled";

alter table "public"."competitions" add column "scout_assignments_config" scout_assignments_config not null default 'disabled'::scout_assignments_config;

CREATE UNIQUE INDEX scout_assignments_position_ba_competition_id_match_number_r_key ON public.scout_assignments_position_based USING btree (competition_id, match_number, robot_position);

CREATE UNIQUE INDEX scout_assignments_position_based_pkey ON public.scout_assignments_position_based USING btree (id);

CREATE UNIQUE INDEX scout_assignments_competition_id_match_id_unique ON public.scout_assignments_team_based USING btree (competition_id, match_id);

CREATE UNIQUE INDEX scout_assignments_pkey ON public.scout_assignments_team_based USING btree (id);

alter table "public"."scout_assignments_position_based" add constraint "scout_assignments_position_based_pkey" PRIMARY KEY using index "scout_assignments_position_based_pkey";

alter table "public"."scout_assignments_team_based" add constraint "scout_assignments_pkey" PRIMARY KEY using index "scout_assignments_pkey";

alter table "public"."scout_assignments_position_based" add constraint "scout_assignments_position_ba_competition_id_match_number_r_key" UNIQUE using index "scout_assignments_position_ba_competition_id_match_number_r_key";

alter table "public"."scout_assignments_position_based" add constraint "scout_assignments_position_based_competition_id_fkey" FOREIGN KEY (competition_id) REFERENCES competitions(id) not valid;

alter table "public"."scout_assignments_position_based" validate constraint "scout_assignments_position_based_competition_id_fkey";

alter table "public"."scout_assignments_position_based" add constraint "scout_assignments_position_based_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."scout_assignments_position_based" validate constraint "scout_assignments_position_based_user_id_fkey";

alter table "public"."scout_assignments_team_based" add constraint "scout_assignments_competition_id_match_id_unique" UNIQUE using index "scout_assignments_competition_id_match_id_unique";

alter table "public"."scout_assignments_team_based" add constraint "scout_assignments_team_based_competition_id_fkey" FOREIGN KEY (competition_id) REFERENCES competitions(id) ON DELETE CASCADE not valid;

alter table "public"."scout_assignments_team_based" validate constraint "scout_assignments_team_based_competition_id_fkey";

alter table "public"."scout_assignments_team_based" add constraint "scout_assignments_team_based_match_id_fkey" FOREIGN KEY (match_id) REFERENCES tba_matches(id) not valid;

alter table "public"."scout_assignments_team_based" validate constraint "scout_assignments_team_based_match_id_fkey";

alter table "public"."scout_assignments_team_based" add constraint "scout_assignments_team_based_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."scout_assignments_team_based" validate constraint "scout_assignments_team_based_user_id_fkey";

create policy "Everyone in a team can view scout assignments"
on "public"."scout_assignments_position_based"
as permissive
for select
to public
using ((( SELECT user_attributes.organization_id AS team_id
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())) = ( SELECT competitions.organization_id AS team_id
   FROM competitions
  WHERE (competitions.id = scout_assignments_position_based.competition_id))));


create policy "Only admins in a team can create scout assignments"
on "public"."scout_assignments_position_based"
as permissive
for insert
to public
with check (((( SELECT user_attributes.organization_id AS team_id
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())) = ( SELECT competitions.organization_id AS team_id
   FROM competitions
  WHERE (competitions.id = scout_assignments_position_based.competition_id))) AND ( SELECT user_attributes.admin
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid()))));


create policy "Only admins in a team can delete scout assignments"
on "public"."scout_assignments_position_based"
as permissive
for delete
to public
using (((( SELECT user_attributes.organization_id AS team_id
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())) = ( SELECT competitions.organization_id AS team_id
   FROM competitions
  WHERE (competitions.id = scout_assignments_position_based.competition_id))) AND ( SELECT user_attributes.admin
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid()))));


create policy "Only admins in a team can update scout assignments"
on "public"."scout_assignments_position_based"
as permissive
for update
to public
using ((( SELECT user_attributes.organization_id AS team_id
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())) = ( SELECT competitions.organization_id AS team_id
   FROM competitions
  WHERE (competitions.id = scout_assignments_position_based.competition_id))))
with check (( SELECT user_attributes.admin
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())));


create policy "Everyone in a team can view scout assignments"
on "public"."scout_assignments_team_based"
as permissive
for select
to public
using ((( SELECT user_attributes.organization_id AS team_id
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())) = ( SELECT competitions.organization_id AS team_id
   FROM competitions
  WHERE (competitions.id = scout_assignments_team_based.competition_id))));


create policy "Only admins in a team can create scout assignments"
on "public"."scout_assignments_team_based"
as permissive
for insert
to public
with check (((( SELECT user_attributes.organization_id AS team_id
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())) = ( SELECT competitions.organization_id AS team_id
   FROM competitions
  WHERE (competitions.id = scout_assignments_team_based.competition_id))) AND ( SELECT user_attributes.admin
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid()))));


create policy "Only admins in a team can delete scout assignments"
on "public"."scout_assignments_team_based"
as permissive
for delete
to public
using (((( SELECT user_attributes.organization_id AS team_id
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())) = ( SELECT competitions.organization_id AS team_id
   FROM competitions
  WHERE (competitions.id = scout_assignments_team_based.competition_id))) AND ( SELECT user_attributes.admin
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid()))));


create policy "Only admins in a team can update scout assignments"
on "public"."scout_assignments_team_based"
as permissive
for update
to public
using ((( SELECT user_attributes.organization_id AS team_id
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())) = ( SELECT competitions.organization_id AS team_id
   FROM competitions
  WHERE (competitions.id = scout_assignments_team_based.competition_id))))
with check (( SELECT user_attributes.admin
   FROM user_attributes
  WHERE (user_attributes.id = auth.uid())));



