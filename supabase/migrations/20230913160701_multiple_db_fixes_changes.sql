alter table "public"."profiles" drop column "firstname";

alter table "public"."profiles" drop column "lastname";

alter table "public"."profiles" add column "first_name" text;

alter table "public"."profiles" add column "last_name" text;

alter table "public"."scout_reports" add column "created_at" timestamp with time zone not null;

alter table "public"."scout_reports" add column "team" integer not null;

alter table "public"."scout_reports" alter column "id" set generated by default;

CREATE UNIQUE INDEX scout_reports_pkey ON public.scout_reports USING btree (id);

alter table "public"."scout_reports" add constraint "scout_reports_pkey" PRIMARY KEY using index "scout_reports_pkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.prevent_created_at_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    IF OLD.created_at IS DISTINCT FROM NEW.created_at THEN
        RAISE EXCEPTION 'The created_at column cannot be updated.';
    END IF;
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.set_created_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.created_at = NOW();
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.set_competition_team_id()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
begin
  new.team_id := (select team_id from user_attributes where id = auth.uid());
  return new;
end;
$function$
;

CREATE TRIGGER scout_reports_prevent_created_at_update_trigger BEFORE UPDATE ON public.scout_reports FOR EACH ROW EXECUTE FUNCTION prevent_created_at_update();

CREATE TRIGGER scout_reports_set_created_at BEFORE INSERT ON public.scout_reports FOR EACH ROW EXECUTE FUNCTION set_created_at();


